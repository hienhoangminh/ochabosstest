package page;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import static org.assertj.core.api.Assertions.assertThat;
import static org.awaitility.Awaitility.await;
import static org.hamcrest.Matchers.is;

import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

public class HomePage {

	private static final Logger log = LogManager.getLogger(HomePage.class.getName());
	
	private WebDriver driver;
	
	private Actions action;
	
	@FindBy(xpath="//div[@class='time-display']")
	private WebElement labelTime;
	
	@FindBy(css=".control-group.user-info")
	private WebElement userInfo;
	
	@FindBy(css="#user-info-dropdown-id .owner-name")
	private WebElement ownerName;
	
	
	
	@FindBy(xpath="//button[@data-target='#logout-modal-id']")
	private WebElement logoutButton;
	
	@FindBy(xpath="//button[@data-dismiss='modal'][contains(.,'Đăng xuất')]")
	private WebElement confirmLogoutButton;
	
	public HomePage(WebDriver driver) {
		this.driver = driver;
		PageFactory.initElements(driver, this);
		this.action = new Actions(driver);
	}
	
	public void clickOnUserInfo() {
		try {
			await("Wait for button Login to be enabled").atMost(20, TimeUnit.SECONDS).until(
					() -> this.userInfo.isEnabled());
		  	action.moveToElement(userInfo).click().perform();
	        log.info("Click on the user profile icon");
		}catch(Exception e) {
			log.error(e.getMessage());
		}
	}
	
	public void assertUserName() {
        log.info("Verify the username");
      	await("Wait for user info is loaded").atMost(20, TimeUnit.SECONDS).until(
				() -> this.ownerName.isDisplayed());
		assertThat(this.ownerName.getText()).isEqualToIgnoringCase("Lê Ngọc Quỳnh");
	}
	
	public void clickOnLogout() {
		try {
			await("Wait for button Login to be enabled").
			     atMost(20, TimeUnit.SECONDS).until(this.logoutButton::getText,
							is("Đăng xuất"));
			this.logoutButton.click();
	        log.info("Click on logout button");
		}catch (Exception e) {
			log.error(e.getMessage());
		}
	}
	    
	public LoginPage clickConfirmLogout() {
		try {
			await("Wait for button Login to be enabled").
		     atMost(20, TimeUnit.SECONDS).until(this.confirmLogoutButton::getText,
						is("Đăng xuất"));
			this.confirmLogoutButton.click();
	        log.info("Click on logout button");
	        return new LoginPage(driver);
		}catch (Exception e) {
			log.error(e.getMessage());
			return null;
		}

	}
	
}
